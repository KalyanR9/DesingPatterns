<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!--Factory Pattern Strings-->
    <string name="lbl_factory_pattern_demo">Factory Pattern Demo</string>
    <string name="lbl_factory_parent_class">IMobileSpec(interface)\n\nboolean isGsm();\nboolean isStereoSpeaker();\nboolean isAmoledDisplay();</string>
    <string name="lbl_motorola">Motorola</string>
    <string name="lbl_samsung">Samsung</string>
    <string name="lbl_source_code_link">Complete Source Code Link</string>
    <string name="lbl_result_text">isGsm() : %1$b\nisStereoSpeaker() : %2$b\nisAmoledDisplay() : %3$b</string>

    <string name="msg_factory">A super class with multiple sub-classes and based on input, We need to return one of the sub class based on selection.
        \n\nThis pattern takes out the responsibility to instantiation of a class from client to factory pattern.</string>

    <!--Abstract Factory Pattern-->
    <string name="lbl_abstract_factory_pattern_demo">Abstract Factory Pattern Demo</string>
    <string name="lbl_abstract_factory_implementation_need">Create device object based on options selection gives you
        an output of screen resolution for those devices.</string>
    <string name="lbl_lenovo">Lenovo K8</string>
    <string name="lbl_samsung_s7">Samsung S7</string>
    <string name="lbl_screen_resolution_text">Device Name : %1$s
        \n\nScreen Resolution : %2$s</string>
    <string name="msg_abstract_factory">This is more like factories of factory pattern. Abstract factory class will return sub class based on the input factory class.
    \n\nWhen to use?\nA family of related objects is designed to be used together, and you need to enforce this constraint.</string>
</resources>