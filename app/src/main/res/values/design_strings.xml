<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!--Factory Pattern Strings-->
    <string name="lbl_factory_pattern_demo">Factory Pattern Demo</string>
    <string name="lbl_factory_parent_class">IMobileSpec(interface)\n\nboolean isGsm();\nboolean isStereoSpeaker();\nboolean isAmoledDisplay();</string>
    <string name="lbl_motorola">Motorola</string>
    <string name="lbl_samsung">Samsung</string>
    <string name="lbl_source_code_link">Complete Source Code Link</string>
    <string name="lbl_result_text">isGsm() : %1$b\nisStereoSpeaker() : %2$b\nisAmoledDisplay() : %3$b</string>

    <string name="msg_singleton_reflaction">Using reflaction we can set the private constructor to become visible at runtime.\n \nYou can Throw runtime exception
        if someone tries to make instance in case one instance is already exist.
        \n\nprivate SingletonReflactionSafe() {
            \n\tif (instance != null) {
                \n\t\tthrow new RuntimeException("Message");
            \n\t}
            \n}\n\nCOMPLETE TO SOURCE CODE</string>
    <string name="msg_singleton_clone">If we try to make instance by cloning it the generated hash code of cloned copy doesn\'t match with actual object.
        \n \nThrow CloneNotSupportedException exception from Override clone() method if someone tries to make other instance of it. Like below code
        \n\n@Override\nprotected Object clone() throws CloneNotSupportedException {
            \n\tif (instance != null) {
                \n\t\tthrow new CloneNotSupportedException("message");
            \n\t}
        \n\treturn super.clone();
        \n}\n\nCOMPLETE SOURCE CODE</string>
    <string name="msg_singleton_serialize">When we serialize an object and deserialize it again there are different hash code value generated.\n \nImplement
        readResolve() method in the singleton class.
        \n\n\private Object readResolve() {
            \n\treturn instance;
        \n}\n\nCOMPLETE SOURCE CODE</string>
    <string name="msg_singleton_multithreaded">By using double check locking with volatile instance variable we can archive singleton design pattern in multithreaded environment.
    Refer complete source code.\n \nSource code covers other ways to create singleton and its advantaged and disadvantages.
    Below is one optimized way we can archive singleton in multithreaded environment
    \n\nprivate static volatile SingletonMultithreaded instance;\n \n \n
    public static SingletonMultithreaded getInstanceDoubleCheck() {
    \n\tif (instance == null) {
        \n\t\tsynchronized (SingletonMultithreaded.class) {
            \n\t\t\tif (instance == null) {
                \n\t\t\t\tinstance = new SingletonMultithreaded();
            \n\t\t\t}
        \n\t\t}
    \n\t}
    \nreturn instance;
    \n}\n\nCOMPLETE SOURCE CODE</string>
    <string name="msg_singleton_holder">Holder Pattern(Bill Pugh) is different approach to create singleton using inner static helper class.
        \n\nstatic class Holder {
            \n\tstatic final SingletonHolderClass instance = new SingletonHolderClass();
        \n}\n\nCOMPLETE SOURCE CODE</string>
    <string name="msg_singleton_enum">In enum java ensure that any enum value instantiated only ones.
        And enum values are globally accessible so is the singleton.\n \nEnum singleton doesn\'t violate
        any principle of singleton.\n \nDisadvantage : Enum type is somewhat inflexible. It does not allow lazy initialization.
        \n\n public enum SingletonEunm {
            \n\tINSTANCE;
        \n \n\tpublic void doSomethong() {
        \n\t\t//Do Something
        \n\t}
        \n}\n\nCOMPLETE SOURCE CODE</string>
    <string name="msg_factory">A super class with multiple sub-classes and based on input, We need to return one of the sub class based on selection.
        \n\nThis pattern takes out the responsibility to instantiation of a class from client to factory pattern.</string>

    <!--Abstract Factory Pattern-->
    <string name="lbl_abstract_factory_pattern_demo">Abstract Factory Pattern Demo</string>
    <string name="lbl_abstract_factory_implementation_need">Create device object based on options selection gives you
        an output of screen resolution for those devices.</string>
    <string name="lbl_lenovo">Lenovo K8</string>
    <string name="lbl_samsung_s7">Samsung S7</string>
    <string name="lbl_screen_resolution_text">Device Name : %1$s
        \n\nScreen Resolution : %2$s</string>
    <string name="msg_abstract_factory">This is more like factories of factory pattern. Abstract factory class will return sub class based on the input factory class.
    \n\nWhen to use?\nA family of related objects is designed to be used together, and you need to enforce this constraint.</string>

    <!--Builder Pattern-->
    <string name="lbl_builder_pattern">Builder Pattern</string>
    <string name="msg_builder_pattern">This pattern is to separate the construction of complex object from its representation,
        so same construction process can create different representation.\n\nThis type of separation reduce the object size.
        Adding new implementation becomes easier.\nObject construction process becomes independent of the component that makes up the object.
        \nYou can have more control over the object construction process.</string>
    <string name="lbl_cake_with_cherry">Cake\nTopping Cherry</string>
    <string name="lbl_cake_with_chocolate">Cake\nChocolate Flavour</string>
    <string name="lbl_cake_with_message">Cake\nCake With Message</string>

    <!--Prototype Pattern-->
    <string name="lbl_prototype">Prototype Pattern</string>
    <string name="msg_prototype">This pattern is used when the object creation is a costly and affair
        and requires a lot of time and resources and you have similar object already existing.\n\nThis pattern provides
        a mechanism to copy the original object to a new object and then modify accordingly.\n\nThis mandates
        that the object which you are copying should provide the copying feature.\\However whether to
        use shallow or deep copy of the object properties depends on the requirements.</string>
    <string name="lbl_samsung_s7_edge">Samsung S7 EDGE</string>
    <string name="lbl_prototype_result_text">DeviceName : %1$s\nScreenResolution : %2$s\nProcessorType : %3$s\nRAM : %4$d</string>
</resources>